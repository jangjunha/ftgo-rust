services:
  ### API Gateway
  api-gateway:
    image: ghcr.io/jangjunha/ftgo-rust-api-gateway:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-api-gateway
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      - AUTH_SERVICE_ENDPOINT=http://auth-rpc:8199
      - RESTAURANT_SERVICE_ENDPOINT=http://restaurant-rpc:8101
      - CONSUMER_SERVICE_ENDPOINT=http://consumer-rpc:8102
      - ORDER_SERVICE_ENDPOINT=http://order-rpc:8103
      - KITCHEN_SERVICE_ENDPOINT=http://kitchen-rpc:8105
      - DELIVERY_SERVICE_ENDPOINT=http://delivery-rpc:8108
      - ACCOUNTING_SERVICE_ENDPOINT=http://accounting-rpc:8104
    ports:
      - 8100:8100
    profiles:
      - ""
      - app

  ### Auth
  auth-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-auth-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-auth-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgres://postgres@auth-db/auth
    ports:
      - 8199:8199
    depends_on:
      - auth-db
    profiles:
      - ""
      - app

  ### Restaurant
  restaurant-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-restaurant-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-restaurant-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@restaurant-db/restaurant
      KAFKA_URL: kafka:9094
    ports:
      - 8101:8101
    depends_on:
      - restaurant-db
    profiles:
      - ""
      - app

  restaurant-producer:
    image: ghcr.io/jangjunha/ftgo-rust-restaurant-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-restaurant-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@restaurant-db/restaurant
      KAFKA_URL: kafka:9094
    depends_on:
      - restaurant-db
    profiles:
      - ""
      - app

  ### Consumer
  consumer-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-consumer-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-consumer-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@consumer-db/consumer
      KAFKA_URL: kafka:9094
    ports:
      - 8102:8102
    depends_on:
      - consumer-db
    profiles:
      - ""
      - app

  consumer-producer:
    image: ghcr.io/jangjunha/ftgo-rust-consumer-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-consumer-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@consumer-db/consumer
      KAFKA_URL: kafka:9094
    depends_on:
      - consumer-db
    profiles:
      - ""
      - app

  consumer-consumer:
    image: ghcr.io/jangjunha/ftgo-rust-consumer-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-consumer-service
    command: ["consumer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@consumer-db/consumer
      KAFKA_URL: kafka:9094
    depends_on:
      - consumer-db
    profiles:
      - ""
      - app

  ### Order
  order-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-order-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-order-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@order-db/order
      KAFKA_URL: kafka:9094
    ports:
      - 8103:8103
    depends_on:
      - order-db
    profiles:
      - ""
      - app

  order-producer:
    image: ghcr.io/jangjunha/ftgo-rust-order-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-order-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@order-db/order
      KAFKA_URL: kafka:9094
    depends_on:
      - order-db
    profiles:
      - ""
      - app

  order-consumer:
    image: ghcr.io/jangjunha/ftgo-rust-order-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-order-service
    command: ["consumer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@order-db/order
      KAFKA_URL: kafka:9094
    depends_on:
      - order-db
    profiles:
      - ""
      - app

  ### Kitchen
  kitchen-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-kitchen-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-kitchen-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@kitchen-db/kitchen
      KAFKA_URL: kafka:9094
    ports:
      - 8105:8105
    depends_on:
      - kitchen-db
    profiles:
      - ""
      - app

  kitchen-producer:
    image: ghcr.io/jangjunha/ftgo-rust-kitchen-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-kitchen-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@kitchen-db/kitchen
      KAFKA_URL: kafka:9094
    depends_on:
      - kitchen-db
    profiles:
      - ""
      - app

  kitchen-consumer:
    image: ghcr.io/jangjunha/ftgo-rust-kitchen-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-kitchen-service
    command: ["consumer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@kitchen-db/kitchen
      KAFKA_URL: kafka:9094
    depends_on:
      - kitchen-db
    profiles:
      - ""
      - app

  ### Delivery
  delivery-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-delivery-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-delivery-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@delivery-db/delivery
      KAFKA_URL: kafka:9094
    ports:
      - 8108:8108
    depends_on:
      - delivery-db
    profiles:
      - ""
      - app

  delivery-producer:
    image: ghcr.io/jangjunha/ftgo-rust-delivery-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-delivery-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@delivery-db/delivery
      KAFKA_URL: kafka:9094
    depends_on:
      - delivery-db
    profiles:
      - ""
      - app

  delivery-consumer:
    image: ghcr.io/jangjunha/ftgo-rust-delivery-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-delivery-service
    command: ["consumer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      DATABASE_URL: postgres://postgres@delivery-db/delivery
      KAFKA_URL: kafka:9094
    depends_on:
      - delivery-db
    profiles:
      - ""
      - app

  ### Accounting
  accounting-rpc:
    image: ghcr.io/jangjunha/ftgo-rust-accounting-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-accounting-service
    command: ["rpc"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      ESDB_URL: esdb://accounting-db:2113?tls=false
      PROJECTION_DATABASE_URL: postgres://postgres@accounting-projection-db/accounting
      KAFKA_URL: kafka:9094
    ports:
      - 8104:8104
    depends_on:
      - accounting-db
      - accounting-projection-db
    profiles:
      - ""
      - app

  accounting-consumer:
    image: ghcr.io/jangjunha/ftgo-rust-accounting-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-accounting-service
    command: ["consumer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      ESDB_URL: esdb://accounting-db:2113?tls=false
      PROJECTION_DATABASE_URL: postgres://postgres@accounting-projection-db/accounting
      KAFKA_URL: kafka:9094
    depends_on:
      - accounting-db
      - accounting-projection-db
    profiles:
      - ""
      - app

  accounting-projector:
    image: ghcr.io/jangjunha/ftgo-rust-accounting-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-accounting-service
    command: ["projector"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      ESDB_URL: esdb://accounting-db:2113?tls=false
      PROJECTION_DATABASE_URL: postgres://postgres@accounting-projection-db/accounting
    depends_on:
      - accounting-db
      - accounting-projection-db
    profiles:
      - ""
      - app

  accounting-producer:
    image: ghcr.io/jangjunha/ftgo-rust-accounting-service:${IMAGE_TAG:-latest}
    build:
      context: .
      args:
        - PACKAGE=ftgo-accounting-service
    command: ["producer"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      ESDB_URL: esdb://accounting-db:2113?tls=false
      KAFKA_URL: kafka:9094
    depends_on:
      - accounting-db
    profiles:
      - ""
      - app

  ### Database
  auth-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=auth
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - 8299:5432
    profiles:
      - ""
      - infra
  restaurant-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=restaurant
    volumes:
      - restaurant-db-data:/var/lib/postgresql/data
    ports:
      - 8201:5432
    profiles:
      - ""
      - infra
  consumer-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=consumer
    volumes:
      - consumer-db-data:/var/lib/postgresql/data
    ports:
      - 8202:5432
    profiles:
      - ""
      - infra
  order-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=order
    volumes:
      - order-db-data:/var/lib/postgresql/data
    ports:
      - 8203:5432
    profiles:
      - ""
      - infra
  kitchen-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=kitchen
    volumes:
      - kitchen-db-data:/var/lib/postgresql/data
    ports:
      - 8205:5432
    profiles:
      - ""
      - infra
  delivery-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=delivery
    volumes:
      - delivery-db-data:/var/lib/postgresql/data
    ports:
      - 8208:5432
    profiles:
      - ""
      - infra

  accounting-db:
    restart: always
    image: docker.eventstore.com/eventstore/eventstoredb-ee:24.10
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_NODE_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "8204:2113"
    volumes:
      - type: volume
        source: accounting-db-data
        target: /var/lib/eventstore
      - type: volume
        source: accounting-db-logs
        target: /var/log/eventstore
    profiles:
      - ""
      - infra
  accounting-projection-db:
    restart: always
    image: postgres:17-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=accounting
    volumes:
      - accounting-projection-db-data:/var/lib/postgresql/data
    ports:
      - 8304:5432
    profiles:
      - ""
      - infra

  kafka:
    restart: always
    image: apache/kafka-native:3.9.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://localhost:9093,DOCKER://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    profiles:
      - ""
      - infra

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8989:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
    depends_on:
      - kafka
    profiles:
      - debug

  kafka-init:
    image: apache/kafka
    depends_on:
      - kafka
    restart: no
    command: >
      sh -c "
      /opt/kafka/bin/kafka-topics.sh --create --topic "restaurant.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "consumer.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "consumer.command" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "delivery.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "kitchen.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "kitchen.command" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "accounting.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "accounting.command" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "order.event" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "order.command" \\
        --bootstrap-server kafka:9094 --if-not-exists;

      /opt/kafka/bin/kafka-topics.sh --create --topic "order.reply" \\
        --bootstrap-server kafka:9094 --if-not-exists;
      "
    profiles:
      - ""
      - infra

volumes:
  auth-db-data: {}
  restaurant-db-data: {}
  consumer-db-data: {}
  kitchen-db-data: {}
  order-db-data: {}
  delivery-db-data: {}
  accounting-db-data: {}
  accounting-db-logs: {}
  accounting-projection-db-data: {}
